{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\Rafael\\Documents\\Faculdade\\Dev_SoftVisual\\MeuApp\\PetCafe\\AppPetCafe\\src\\app\\components\\produtos\\produtos.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Fornecedor } from 'src/app/Model/Fornecedor'; \nimport { Produto } from 'src/app/Model/Produto'; \nimport { FornecedorService } \n\n@Component({\n  selector: 'app-produtos',\n  templateUrl: './produtos.component.html',\n  styleUrls: ['./produtos.component.css'],\n})\nexport class ProdutosComponent implements OnInit {\n  formulario_produto: FormGroup;\n  fornecedores: Fornecedor[] = [];\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private fornecedorService: FornecedorService // Injete o serviço no construtor\n  ) {}\n\n  ngOnInit(): void {\n    this.formulario_produto = this.formBuilder.group({\n      fornecedor: ['', Validators.required],\n      nome: ['', Validators.required],\n      descricao: ['', Validators.required],\n      valor: ['', Validators.required],\n    });\n\n    this.obterFornecedores(); // Chame o método para obter fornecedores ao inicializar o componente\n  }\n\n  obterFornecedores(): void {\n    this.fornecedorService.obterFornecedores().subscribe(\n      (fornecedores) => {\n        this.fornecedores = fornecedores;\n      },\n      (error) => {\n        console.error('Erro ao obter fornecedores:', error);\n        // Lide com o erro de acordo com a sua necessidade\n      }\n    );\n  }\n\n  enviarFormulario(): void {\n    if (this.formulario_produto.valid) {\n      const produto: Produto = this.formulario_produto.value;\n      console.log(produto);\n      // Adicione aqui a lógica para enviar o produto para o servidor, por exemplo, por meio de um serviço\n    }\n  }\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}