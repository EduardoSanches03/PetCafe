{"ast":null,"code":"import { __decorate } from \"tslib\";\n// produtos.component.ts\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nexport let ProdutosComponent = class ProdutosComponent {\n  constructor(produtoService, fornecedorService) {\n    this.produtoService = produtoService;\n    this.fornecedorService = fornecedorService;\n    this.formulario_produto = new FormGroup({});\n    this.tituloFormulario = '';\n  }\n  ngOnInit() {\n    this.tituloFormulario = 'Novo Produto ';\n    this.fornecedorService.listar().subscribe(fornecedores => {\n      this.fornecedores = fornecedores;\n      if (this.fornecedores && this.fornecedores.length > 0) {\n        this.formulario_produto.get('fornecedor')?.setValue(this.fornecedores[0].cnpj);\n        // Outros campos, se necessário\n      }\n    });\n\n    this.formulario_produto = new FormGroup({\n      codigo: new FormControl(null),\n      fornecedor: new FormControl(null),\n      nome: new FormControl(null),\n      descricao: new FormControl(null),\n      valor: new FormControl(null)\n    });\n  }\n  enviarFormulario() {\n    const produto = this.formulario_produto.value;\n    const observer = {\n      next(_result) {\n        alert('Produto salvo com sucesso.');\n      },\n      error(_error) {\n        alert('Erro ao salvar o produto.');\n      },\n      complete() {}\n    };\n    if (produto.codigo && !isNaN(Number(produto.codigo))) {\n      this.produtoService.alterar(produto).subscribe(observer);\n    } else {\n      this.produtoService.cadastrar(produto).subscribe(observer);\n    }\n  }\n};\nProdutosComponent = __decorate([Component({\n  selector: 'app-produtos',\n  templateUrl: './produtos.component.html',\n  styleUrls: ['./produtos.component.css']\n})], ProdutosComponent);","map":{"version":3,"names":["Component","FormControl","FormGroup","ProdutosComponent","constructor","produtoService","fornecedorService","formulario_produto","tituloFormulario","ngOnInit","listar","subscribe","fornecedores","length","get","setValue","cnpj","codigo","fornecedor","nome","descricao","valor","enviarFormulario","produto","value","observer","next","_result","alert","error","_error","complete","isNaN","Number","alterar","cadastrar","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Rafael\\Documents\\Faculdade\\Dev_SoftVisual\\MeuApp\\PetCafe\\AppPetCafe\\src\\app\\components\\produtos\\produtos.component.ts"],"sourcesContent":["// produtos.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ProdutosService } from 'src/app/ProdutoServico/produtos.service';\nimport { Produto } from 'src/app/Model/Produto';\nimport { Fornecedor } from 'src/app/Model/Fornecedor';\nimport { FornecedoresService } ';\nimport { Observer } from 'rxjs';\n\n@Component({\n  selector: 'app-produtos',\n  templateUrl: './produtos.component.html',\n  styleUrls: ['./produtos.component.css']\n})\nexport class ProdutosComponent implements OnInit {\n  formulario_produto: FormGroup = new FormGroup({}); \n  tituloFormulario: string = '';\n  fornecedores: Array<Fornecedor> | undefined;\n\n  constructor(private produtoService: ProdutosService, private fornecedorService: FornecedoresService) { }\n\n  ngOnInit(): void {\n    this.tituloFormulario = 'Novo Produto ';\n    this.fornecedorService.listar().subscribe(fornecedores => {\n      this.fornecedores = fornecedores;\n      if (this.fornecedores && this.fornecedores.length > 0) {\n        this.formulario_produto.get('fornecedor')?.setValue(this.fornecedores[0].cnpj);\n        // Outros campos, se necessário\n      }\n    });\n\n    this.formulario_produto = new FormGroup({\n      codigo: new FormControl(null),\n      fornecedor: new FormControl(null),\n      nome: new FormControl(null),\n      descricao: new FormControl(null),\n      valor: new FormControl(null)\n    });\n  }\n\n  enviarFormulario(): void {\n    const produto: Produto = this.formulario_produto.value;\n    const observer: Observer<Produto> = {\n      next(_result): void {\n        alert('Produto salvo com sucesso.');\n      },\n      error(_error): void {\n        alert('Erro ao salvar o produto.');\n      },\n      complete(): void {},\n    };\n\n    if (produto.codigo && !isNaN(Number(produto.codigo))) {\n      this.produtoService.alterar(produto).subscribe(observer);\n    } else {\n      this.produtoService.cadastrar(produto).subscribe(observer);\n    }\n  }\n}\n"],"mappings":";AAAA;AACA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,WAAW,EAAEC,SAAS,QAAQ,gBAAgB;AAYhD,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAK5BC,YAAoBC,cAA+B,EAAUC,iBAAsC;IAA/E,KAAAD,cAAc,GAAdA,cAAc;IAA2B,KAAAC,iBAAiB,GAAjBA,iBAAiB;IAJ9E,KAAAC,kBAAkB,GAAc,IAAIL,SAAS,CAAC,EAAE,CAAC;IACjD,KAAAM,gBAAgB,GAAW,EAAE;EAG0E;EAEvGC,QAAQA,CAAA;IACN,IAAI,CAACD,gBAAgB,GAAG,eAAe;IACvC,IAAI,CAACF,iBAAiB,CAACI,MAAM,EAAE,CAACC,SAAS,CAACC,YAAY,IAAG;MACvD,IAAI,CAACA,YAAY,GAAGA,YAAY;MAChC,IAAI,IAAI,CAACA,YAAY,IAAI,IAAI,CAACA,YAAY,CAACC,MAAM,GAAG,CAAC,EAAE;QACrD,IAAI,CAACN,kBAAkB,CAACO,GAAG,CAAC,YAAY,CAAC,EAAEC,QAAQ,CAAC,IAAI,CAACH,YAAY,CAAC,CAAC,CAAC,CAACI,IAAI,CAAC;QAC9E;;IAEJ,CAAC,CAAC;;IAEF,IAAI,CAACT,kBAAkB,GAAG,IAAIL,SAAS,CAAC;MACtCe,MAAM,EAAE,IAAIhB,WAAW,CAAC,IAAI,CAAC;MAC7BiB,UAAU,EAAE,IAAIjB,WAAW,CAAC,IAAI,CAAC;MACjCkB,IAAI,EAAE,IAAIlB,WAAW,CAAC,IAAI,CAAC;MAC3BmB,SAAS,EAAE,IAAInB,WAAW,CAAC,IAAI,CAAC;MAChCoB,KAAK,EAAE,IAAIpB,WAAW,CAAC,IAAI;KAC5B,CAAC;EACJ;EAEAqB,gBAAgBA,CAAA;IACd,MAAMC,OAAO,GAAY,IAAI,CAAChB,kBAAkB,CAACiB,KAAK;IACtD,MAAMC,QAAQ,GAAsB;MAClCC,IAAIA,CAACC,OAAO;QACVC,KAAK,CAAC,4BAA4B,CAAC;MACrC,CAAC;MACDC,KAAKA,CAACC,MAAM;QACVF,KAAK,CAAC,2BAA2B,CAAC;MACpC,CAAC;MACDG,QAAQA,CAAA,GAAU;KACnB;IAED,IAAIR,OAAO,CAACN,MAAM,IAAI,CAACe,KAAK,CAACC,MAAM,CAACV,OAAO,CAACN,MAAM,CAAC,CAAC,EAAE;MACpD,IAAI,CAACZ,cAAc,CAAC6B,OAAO,CAACX,OAAO,CAAC,CAACZ,SAAS,CAACc,QAAQ,CAAC;KACzD,MAAM;MACL,IAAI,CAACpB,cAAc,CAAC8B,SAAS,CAACZ,OAAO,CAAC,CAACZ,SAAS,CAACc,QAAQ,CAAC;;EAE9D;CACD;AA5CYtB,iBAAiB,GAAAiC,UAAA,EAL7BpC,SAAS,CAAC;EACTqC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,C,EACWpC,iBAAiB,CA4C7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}