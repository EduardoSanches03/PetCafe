{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { EditfornmodalComponent } from '../editfornmodal/editfornmodal.component';\nexport let ListaFornecedoresComponent = class ListaFornecedoresComponent {\n  constructor(fornecedorServico, router, modalService) {\n    this.fornecedorServico = fornecedorServico;\n    this.router = router;\n    this.modalService = modalService;\n    this.tituloFormulario = '';\n    this.fornecedores = [];\n  }\n  ngOnInit() {\n    this.obterFornecedores();\n  }\n  obterFornecedores() {\n    this.fornecedorServico.listar().subscribe(fornecedores => {\n      this.fornecedores = fornecedores;\n    }, error => {\n      console.error('Erro ao obter fornecedor', error);\n    });\n  }\n  removerCliente(cpf) {\n    this.fornecedorServico.excluir(cpf).subscribe(() => {\n      console.log('Fornecedor removido com sucesso!');\n      this.obterFornecedores();\n    }, error => {\n      console.error('Erro ao remover fornecedor', error);\n    });\n  }\n  abrirModalEditar(fornecedor) {\n    if (fornecedor) {\n      const initialState = {\n        fornecedor: {\n          ...fornecedor\n        }\n      };\n      this.modalRef = this.modalService.show(EditfornmodalComponent, {\n        initialState\n      });\n      if (this.modalRef.content?.onAtualizado) {\n        this.modalRef.content.onAtualizado.subscribe(() => {\n          this.obterFornecedores();\n          this.modalRef.hide();\n        });\n      }\n    }\n  }\n  formatarCnpj(cnpj) {\n    return cnpj.replace(/(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})/, '$1.$2.$3/$4-$5');\n  }\n};\nListaFornecedoresComponent = __decorate([Component({\n  selector: 'app-lista-fornecedores',\n  templateUrl: './lista-fornecedores.component.html',\n  styleUrls: ['./lista-fornecedores.component.css']\n})], ListaFornecedoresComponent);","map":{"version":3,"names":["Component","EditfornmodalComponent","ListaFornecedoresComponent","constructor","fornecedorServico","router","modalService","tituloFormulario","fornecedores","ngOnInit","obterFornecedores","listar","subscribe","error","console","removerCliente","cpf","excluir","log","abrirModalEditar","fornecedor","initialState","modalRef","show","content","onAtualizado","hide","formatarCnpj","cnpj","replace","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Eduardo\\Documents\\GitHub\\PetCafe\\apppetcafe\\src\\app\\components\\lista-fornecedores\\lista-fornecedores.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FornecedoresService } from 'src/app/Servico/FornecedorServico/fornecedores.service';\nimport { Fornecedor } from 'src/app/Model/Fornecedor';\nimport { Router } from '@angular/router';\nimport { EditfornmodalComponent } from '../editfornmodal/editfornmodal.component';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\n\n@Component({\n  selector: 'app-lista-fornecedores',\n  templateUrl: './lista-fornecedores.component.html',\n  styleUrls: ['./lista-fornecedores.component.css'],\n})\nexport class ListaFornecedoresComponent implements OnInit {\n  formulario: any;\n  tituloFormulario: string = '';\n  fornecedores: Fornecedor[] = [];\n  modalRef!: BsModalRef;\n\n  constructor(\n    private fornecedorServico: FornecedoresService,\n    private router: Router,\n    private modalService: BsModalService\n  ) {}\n\n  ngOnInit(): void {\n    this.obterFornecedores();\n  }\n\n  obterFornecedores(): void {\n    this.fornecedorServico.listar().subscribe(\n      (fornecedores) => {\n        this.fornecedores = fornecedores;\n      },\n      (error) => {\n        console.error('Erro ao obter fornecedor', error);\n      }\n    );\n  }\n\n  removerCliente(cpf: string): void {\n    this.fornecedorServico.excluir(cpf).subscribe(\n      () => {\n        console.log('Fornecedor removido com sucesso!');\n        this.obterFornecedores();\n      },\n      (error) => {\n        console.error('Erro ao remover fornecedor', error);\n      }\n    );\n  }\n\n  abrirModalEditar(fornecedor: Fornecedor): void {\n    if (fornecedor) {\n      const initialState = { fornecedor: { ...fornecedor } };\n\n      this.modalRef = this.modalService.show(EditfornmodalComponent, {\n        initialState,\n      });\n\n      if (this.modalRef.content?.onAtualizado) {\n        this.modalRef.content.onAtualizado.subscribe(() => {\n          this.obterFornecedores();\n\n          this.modalRef.hide();\n        });\n      }\n    }\n  }\n\n  formatarCnpj(cnpj: string): string {\n    return cnpj.replace(/(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})/, '$1.$2.$3/$4-$5');\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAIjD,SAASC,sBAAsB,QAAQ,0CAA0C;AAQ1E,WAAMC,0BAA0B,GAAhC,MAAMA,0BAA0B;EAMrCC,YACUC,iBAAsC,EACtCC,MAAc,EACdC,YAA4B;IAF5B,KAAAF,iBAAiB,GAAjBA,iBAAiB;IACjB,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,YAAY,GAAZA,YAAY;IAPtB,KAAAC,gBAAgB,GAAW,EAAE;IAC7B,KAAAC,YAAY,GAAiB,EAAE;EAO5B;EAEHC,QAAQA,CAAA;IACN,IAAI,CAACC,iBAAiB,EAAE;EAC1B;EAEAA,iBAAiBA,CAAA;IACf,IAAI,CAACN,iBAAiB,CAACO,MAAM,EAAE,CAACC,SAAS,CACtCJ,YAAY,IAAI;MACf,IAAI,CAACA,YAAY,GAAGA,YAAY;IAClC,CAAC,EACAK,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD,CAAC,CACF;EACH;EAEAE,cAAcA,CAACC,GAAW;IACxB,IAAI,CAACZ,iBAAiB,CAACa,OAAO,CAACD,GAAG,CAAC,CAACJ,SAAS,CAC3C,MAAK;MACHE,OAAO,CAACI,GAAG,CAAC,kCAAkC,CAAC;MAC/C,IAAI,CAACR,iBAAiB,EAAE;IAC1B,CAAC,EACAG,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD,CAAC,CACF;EACH;EAEAM,gBAAgBA,CAACC,UAAsB;IACrC,IAAIA,UAAU,EAAE;MACd,MAAMC,YAAY,GAAG;QAAED,UAAU,EAAE;UAAE,GAAGA;QAAU;MAAE,CAAE;MAEtD,IAAI,CAACE,QAAQ,GAAG,IAAI,CAAChB,YAAY,CAACiB,IAAI,CAACtB,sBAAsB,EAAE;QAC7DoB;OACD,CAAC;MAEF,IAAI,IAAI,CAACC,QAAQ,CAACE,OAAO,EAAEC,YAAY,EAAE;QACvC,IAAI,CAACH,QAAQ,CAACE,OAAO,CAACC,YAAY,CAACb,SAAS,CAAC,MAAK;UAChD,IAAI,CAACF,iBAAiB,EAAE;UAExB,IAAI,CAACY,QAAQ,CAACI,IAAI,EAAE;QACtB,CAAC,CAAC;;;EAGR;EAEAC,YAAYA,CAACC,IAAY;IACvB,OAAOA,IAAI,CAACC,OAAO,CAAC,qCAAqC,EAAE,gBAAgB,CAAC;EAC9E;CAED;AA7DY3B,0BAA0B,GAAA4B,UAAA,EALtC9B,SAAS,CAAC;EACT+B,QAAQ,EAAE,wBAAwB;EAClCC,WAAW,EAAE,qCAAqC;EAClDC,SAAS,EAAE,CAAC,oCAAoC;CACjD,CAAC,C,EACW/B,0BAA0B,CA6DtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}