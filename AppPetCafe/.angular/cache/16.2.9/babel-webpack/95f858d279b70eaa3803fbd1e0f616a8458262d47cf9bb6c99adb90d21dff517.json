{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nexport let ProdutosComponent = class ProdutosComponent {\n  constructor(formBuilder, fornecedorService, router, produtoService) {\n    this.formBuilder = formBuilder;\n    this.fornecedorService = fornecedorService;\n    this.router = router;\n    this.produtoService = produtoService;\n    this.fornecedores = [];\n  }\n  ngOnInit() {\n    this.formulario_produto = new FormGroup({\n      cnpj: new FormControl(null),\n      nome: new FormControl(null),\n      descricao: new FormControl(null),\n      valor: new FormControl(null)\n    });\n    this.formulario_produto = this.formBuilder.group({});\n    this.obterFornecedores(); // Chame o método para obter fornecedores ao inicializar o componente\n  }\n\n  obterFornecedores() {\n    this.fornecedorService.listar().subscribe(fornecedores => {\n      this.fornecedores = fornecedores;\n    }, error => {\n      console.error('Erro ao obter fornecedores:', error);\n      // Lide com o erro de acordo com a sua necessidade\n    });\n  }\n\n  salvarFornecedor() {\n    const produto = this.formulario_produto.value;\n    this.produtoService.cadastrarProduto(produto).subscribe(result => {\n      alert('Cliente inserido com sucesso.');\n      this.router.navigate([\"/home\"]);\n    });\n  }\n};\nProdutosComponent = __decorate([Component({\n  selector: 'app-produtos',\n  templateUrl: './produtos.component.html',\n  styleUrls: ['./produtos.component.css']\n})], ProdutosComponent);","map":{"version":3,"names":["Component","FormControl","FormGroup","ProdutosComponent","constructor","formBuilder","fornecedorService","router","produtoService","fornecedores","ngOnInit","formulario_produto","cnpj","nome","descricao","valor","group","obterFornecedores","listar","subscribe","error","console","salvarFornecedor","produto","value","cadastrarProduto","result","alert","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Rafael\\Documents\\Faculdade\\Dev_SoftVisual\\MeuApp\\PetCafe\\AppPetCafe\\src\\app\\components\\produtos\\produtos.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Fornecedor } from 'src/app/Model/Fornecedor'; \nimport { Produto } from 'src/app/Model/Produto'; \nimport { FornecedoresService } from 'src/app/Servico/FornecedorServico/fornecedores.service'; \nimport { Router } from '@angular/router';\nimport { ProdutosService } from 'src/app/Servico/ProdutoServico/produtos.service';\n\n@Component({\n  selector: 'app-produtos',\n  templateUrl: './produtos.component.html',\n  styleUrls: ['./produtos.component.css'],\n})\nexport class ProdutosComponent implements OnInit {\n  formulario_produto!: FormGroup;\n  fornecedores: Fornecedor[] = [];\n\n  constructor(private formBuilder: FormBuilder,private fornecedorService: FornecedoresService, private router : Router, private produtoService: ProdutosService) {}\n\n  ngOnInit(): void {\n    \n    this.formulario_produto = new FormGroup({\n    cnpj: new FormControl(null),\n    nome: new FormControl(null),\n    descricao: new FormControl(null),\n    valor: new FormControl(null)\n    })\n    \n    this.formulario_produto = this.formBuilder.group({\n      \n    });\n\n    this.obterFornecedores(); // Chame o método para obter fornecedores ao inicializar o componente\n  }\n\n  obterFornecedores(): void {\n    this.fornecedorService.listar().subscribe(\n      (fornecedores) => {\n        this.fornecedores = fornecedores;\n        \n      },\n      (error) => {\n        console.error('Erro ao obter fornecedores:', error);\n        // Lide com o erro de acordo com a sua necessidade\n      }\n    );\n  }\n\n   salvarFornecedor(): void {\n    const produto: Produto = this.formulario_produto.value;\n    this.produtoService.cadastrarProduto(produto).subscribe(result => {\n    alert('Cliente inserido com sucesso.');\n    this.router.navigate([\"/home\"]);\n    });\n    }\n    }\n\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAsBC,WAAW,EAAEC,SAAS,QAAoB,gBAAgB;AAYzE,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAI5BC,YAAoBC,WAAwB,EAASC,iBAAsC,EAAUC,MAAe,EAAUC,cAA+B;IAAzI,KAAAH,WAAW,GAAXA,WAAW;IAAsB,KAAAC,iBAAiB,GAAjBA,iBAAiB;IAA+B,KAAAC,MAAM,GAANA,MAAM;IAAmB,KAAAC,cAAc,GAAdA,cAAc;IAF5I,KAAAC,YAAY,GAAiB,EAAE;EAEiI;EAEhKC,QAAQA,CAAA;IAEN,IAAI,CAACC,kBAAkB,GAAG,IAAIT,SAAS,CAAC;MACxCU,IAAI,EAAE,IAAIX,WAAW,CAAC,IAAI,CAAC;MAC3BY,IAAI,EAAE,IAAIZ,WAAW,CAAC,IAAI,CAAC;MAC3Ba,SAAS,EAAE,IAAIb,WAAW,CAAC,IAAI,CAAC;MAChCc,KAAK,EAAE,IAAId,WAAW,CAAC,IAAI;KAC1B,CAAC;IAEF,IAAI,CAACU,kBAAkB,GAAG,IAAI,CAACN,WAAW,CAACW,KAAK,CAAC,EAEhD,CAAC;IAEF,IAAI,CAACC,iBAAiB,EAAE,CAAC,CAAC;EAC5B;;EAEAA,iBAAiBA,CAAA;IACf,IAAI,CAACX,iBAAiB,CAACY,MAAM,EAAE,CAACC,SAAS,CACtCV,YAAY,IAAI;MACf,IAAI,CAACA,YAAY,GAAGA,YAAY;IAElC,CAAC,EACAW,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC,CACF;EACH;;EAECE,gBAAgBA,CAAA;IACf,MAAMC,OAAO,GAAY,IAAI,CAACZ,kBAAkB,CAACa,KAAK;IACtD,IAAI,CAAChB,cAAc,CAACiB,gBAAgB,CAACF,OAAO,CAAC,CAACJ,SAAS,CAACO,MAAM,IAAG;MACjEC,KAAK,CAAC,+BAA+B,CAAC;MACtC,IAAI,CAACpB,MAAM,CAACqB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC,CAAC;EACF;CACC;AA1CQzB,iBAAiB,GAAA0B,UAAA,EAL7B7B,SAAS,CAAC;EACT8B,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,C,EACW7B,iBAAiB,CA0CzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}