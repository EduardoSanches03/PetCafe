{"ast":null,"code":"// produtos.component.ts\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let ProdutosComponent = class ProdutosComponent {\n  constructor(formBuilder, fornecedorService, produtosService) {\n    this.formBuilder = formBuilder;\n    this.fornecedorService = fornecedorService;\n    this.produtosService = produtosService;\n  }\n  ngOnInit() {\n    this.fornecedorService.listar().subscribe(fornecedor => {\n      this.fornecedores = fornecedor;\n      this.formulario_produto = this.formBuilder.group({\n        fornecedor: ['', Validators.required],\n        nome: ['', Validators.required],\n        descricao: ['', Validators.required],\n        valor: ['', Validators.required]\n      });\n      if (this.fornecedores && this.fornecedores.length > 0) {\n        this.formulario_produto.get('fornecedor')?.setValue(this.fornecedores[0].cnpj);\n      }\n    });\n  }\n  enviarFormulario() {\n    if (this.formulario_produto.valid) {\n      const produto = this.formulario_produto.value;\n      // Chame o serviço para cadastrar o produto\n      this.produtosService.cadastrar(produto).subscribe(response => {\n        console.log('Produto cadastrado com sucesso:', response);\n        alert('Produto cadastrado com sucesso!');\n      }, error => {\n        console.error('Erro ao cadastrar produto:', error);\n        alert('Erro ao cadastrar produto. Verifique o console para mais informações.');\n      });\n    }\n  }\n};\nProdutosComponent = __decorate([Component({\n  selector: 'app-produtos',\n  templateUrl: './produtos.component.html',\n  styleUrls: ['./produtos.component.css']\n})], ProdutosComponent);","map":{"version":3,"names":["Component","Validators","ProdutosComponent","constructor","formBuilder","fornecedorService","produtosService","ngOnInit","listar","subscribe","fornecedor","fornecedores","formulario_produto","group","required","nome","descricao","valor","length","get","setValue","cnpj","enviarFormulario","valid","produto","value","cadastrar","response","console","log","alert","error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Rafael\\Documents\\Faculdade\\Dev_SoftVisual\\MeuApp\\PetCafe\\AppPetCafe\\src\\app\\components\\produtos\\produtos.component.ts"],"sourcesContent":["// produtos.component.ts\n\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Fornecedor } from 'src/app/Model/Fornecedor';\nimport { Produto } from 'src/app/Model/Produto';\nimport { FornecedoresService } from 'src/app/Servico/FornecedorServico/fornecedores.service';\nimport { ProdutosService } from 'src/app/Servico/ProdutoServico/produtos.service';\n\n@Component({\n  selector: 'app-produtos',\n  templateUrl: './produtos.component.html',\n  styleUrls: ['./produtos.component.css'],\n})\nexport class ProdutosComponent implements OnInit {\n  formulario_produto!: FormGroup;\n  fornecedores: Array<Fornecedor> | undefined;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private fornecedorService: FornecedoresService,\n    private produtosService: ProdutosService\n  ) {}\n\n  ngOnInit(): void {\n    this.fornecedorService.listar().subscribe((fornecedor) => {\n      this.fornecedores = fornecedor;\n\n      this.formulario_produto = this.formBuilder.group({\n        fornecedor: ['', Validators.required],\n        nome: ['', Validators.required],\n        descricao: ['', Validators.required],\n        valor: ['', Validators.required],\n      });\n\n      if (this.fornecedores && this.fornecedores.length > 0) {\n        this.formulario_produto.get('fornecedor')?.setValue(this.fornecedores[0].cnpj);\n      }\n    });\n  }\n\n  enviarFormulario(): void {\n    if (this.formulario_produto.valid) {\n      const produto: Produto = this.formulario_produto.value;\n\n      // Chame o serviço para cadastrar o produto\n      this.produtosService.cadastrar(produto).subscribe(\n        (response) => {\n          console.log('Produto cadastrado com sucesso:', response);\n          alert('Produto cadastrado com sucesso!');\n        },\n        (error) => {\n          console.error('Erro ao cadastrar produto:', error);\n          alert('Erro ao cadastrar produto. Verifique o console para mais informações.');\n        }\n      );\n    }\n  }\n}\n"],"mappings":"AAAA;;AAEA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAAQ,gBAAgB;AAW5D,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAI5BC,YACUC,WAAwB,EACxBC,iBAAsC,EACtCC,eAAgC;IAFhC,KAAAF,WAAW,GAAXA,WAAW;IACX,KAAAC,iBAAiB,GAAjBA,iBAAiB;IACjB,KAAAC,eAAe,GAAfA,eAAe;EACtB;EAEHC,QAAQA,CAAA;IACN,IAAI,CAACF,iBAAiB,CAACG,MAAM,EAAE,CAACC,SAAS,CAAEC,UAAU,IAAI;MACvD,IAAI,CAACC,YAAY,GAAGD,UAAU;MAE9B,IAAI,CAACE,kBAAkB,GAAG,IAAI,CAACR,WAAW,CAACS,KAAK,CAAC;QAC/CH,UAAU,EAAE,CAAC,EAAE,EAAET,UAAU,CAACa,QAAQ,CAAC;QACrCC,IAAI,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACa,QAAQ,CAAC;QAC/BE,SAAS,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACa,QAAQ,CAAC;QACpCG,KAAK,EAAE,CAAC,EAAE,EAAEhB,UAAU,CAACa,QAAQ;OAChC,CAAC;MAEF,IAAI,IAAI,CAACH,YAAY,IAAI,IAAI,CAACA,YAAY,CAACO,MAAM,GAAG,CAAC,EAAE;QACrD,IAAI,CAACN,kBAAkB,CAACO,GAAG,CAAC,YAAY,CAAC,EAAEC,QAAQ,CAAC,IAAI,CAACT,YAAY,CAAC,CAAC,CAAC,CAACU,IAAI,CAAC;;IAElF,CAAC,CAAC;EACJ;EAEAC,gBAAgBA,CAAA;IACd,IAAI,IAAI,CAACV,kBAAkB,CAACW,KAAK,EAAE;MACjC,MAAMC,OAAO,GAAY,IAAI,CAACZ,kBAAkB,CAACa,KAAK;MAEtD;MACA,IAAI,CAACnB,eAAe,CAACoB,SAAS,CAACF,OAAO,CAAC,CAACf,SAAS,CAC9CkB,QAAQ,IAAI;QACXC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEF,QAAQ,CAAC;QACxDG,KAAK,CAAC,iCAAiC,CAAC;MAC1C,CAAC,EACAC,KAAK,IAAI;QACRH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDD,KAAK,CAAC,uEAAuE,CAAC;MAChF,CAAC,CACF;;EAEL;CACD;AA5CY5B,iBAAiB,GAAA8B,UAAA,EAL7BhC,SAAS,CAAC;EACTiC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,C,EACWjC,iBAAiB,CA4C7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}